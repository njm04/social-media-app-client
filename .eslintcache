[{"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx":"1","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts":"2","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx":"3","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx":"4","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx":"5","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx":"6","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts":"7","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts":"8","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts":"9","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts":"10","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts":"11","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts":"12","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts":"13","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx":"14","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts":"15","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx":"16","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx":"17","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts":"18","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts":"19","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx":"20","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts":"21","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts":"22","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts":"23","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx":"24","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts":"25","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts":"26","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx":"27","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx":"28","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx":"29","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx":"30","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx":"31","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts":"32","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx":"33","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx":"34","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx":"35","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx":"36","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx":"37","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts":"38","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx":"39","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\friends.ts":"40","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\notifications.tsx":"41","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\styledBadge.tsx":"42","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\friendsListDrawer.tsx":"43","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\chatBox.tsx":"44","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\register.tsx":"45","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\datePicker.tsx":"46","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\registration.ts":"47","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\login.ts":"48","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\custom_hooks\\useUserData.ts":"49"},{"size":744,"mtime":1609152994118,"results":"50","hashOfConfig":"51"},{"size":425,"mtime":499162500000,"results":"52","hashOfConfig":"51"},{"size":1040,"mtime":1616445761032,"results":"53","hashOfConfig":"51"},{"size":5735,"mtime":1615922111270,"results":"54","hashOfConfig":"51"},{"size":469,"mtime":1615763945561,"results":"55","hashOfConfig":"51"},{"size":3279,"mtime":1617744035140,"results":"56","hashOfConfig":"51"},{"size":351,"mtime":1609881888221,"results":"57","hashOfConfig":"51"},{"size":444,"mtime":1608275930106,"results":"58","hashOfConfig":"51"},{"size":873,"mtime":1612137878206,"results":"59","hashOfConfig":"51"},{"size":2271,"mtime":1615441045489,"results":"60","hashOfConfig":"51"},{"size":963,"mtime":1609232899277,"results":"61","hashOfConfig":"51"},{"size":622,"mtime":1613432566943,"results":"62","hashOfConfig":"51"},{"size":541,"mtime":1608720934917,"results":"63","hashOfConfig":"51"},{"size":520,"mtime":1609732989926,"results":"64","hashOfConfig":"51"},{"size":1255,"mtime":1608197531583,"results":"65","hashOfConfig":"51"},{"size":10610,"mtime":1617747183640,"results":"66","hashOfConfig":"51"},{"size":897,"mtime":1609890737444,"results":"67","hashOfConfig":"51"},{"size":4286,"mtime":1616429325422,"results":"68","hashOfConfig":"51"},{"size":1723,"mtime":1617749126626,"results":"69","hashOfConfig":"51"},{"size":6392,"mtime":1615914153484,"results":"70","hashOfConfig":"51"},{"size":3952,"mtime":1615913880788,"results":"71","hashOfConfig":"51"},{"size":1637,"mtime":1610574278412,"results":"72","hashOfConfig":"51"},{"size":807,"mtime":1615907267139,"results":"73","hashOfConfig":"51"},{"size":1635,"mtime":1610574626850,"results":"74","hashOfConfig":"51"},{"size":3605,"mtime":1617845192831,"results":"75","hashOfConfig":"51"},{"size":3024,"mtime":1613880811010,"results":"76","hashOfConfig":"51"},{"size":4017,"mtime":1617844922466,"results":"77","hashOfConfig":"51"},{"size":6249,"mtime":1611285389998,"results":"78","hashOfConfig":"51"},{"size":12276,"mtime":1617749185757,"results":"79","hashOfConfig":"51"},{"size":10393,"mtime":1617845275155,"results":"80","hashOfConfig":"51"},{"size":9367,"mtime":1617838726732,"results":"81","hashOfConfig":"51"},{"size":3945,"mtime":1615516743779,"results":"82","hashOfConfig":"51"},{"size":488,"mtime":1615223800470,"results":"83","hashOfConfig":"51"},{"size":6091,"mtime":1617839688822,"results":"84","hashOfConfig":"51"},{"size":2817,"mtime":1617749193384,"results":"85","hashOfConfig":"51"},{"size":4016,"mtime":1611289742471,"results":"86","hashOfConfig":"51"},{"size":2929,"mtime":1615762899959,"results":"87","hashOfConfig":"51"},{"size":423,"mtime":1612146937607,"results":"88","hashOfConfig":"51"},{"size":2524,"mtime":1612147549355,"results":"89","hashOfConfig":"51"},{"size":6383,"mtime":1615913153876,"results":"90","hashOfConfig":"51"},{"size":6239,"mtime":1613623270373,"results":"91","hashOfConfig":"51"},{"size":979,"mtime":1614391336227,"results":"92","hashOfConfig":"51"},{"size":4173,"mtime":1617749225630,"results":"93","hashOfConfig":"51"},{"size":13564,"mtime":1617845919774,"results":"94","hashOfConfig":"51"},{"size":7948,"mtime":1615521967483,"results":"95","hashOfConfig":"51"},{"size":1645,"mtime":1615513684353,"results":"96","hashOfConfig":"51"},{"size":642,"mtime":1615521951784,"results":"97","hashOfConfig":"51"},{"size":316,"mtime":1615521697126,"results":"98","hashOfConfig":"51"},{"size":608,"mtime":1617747111000,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"10t8t05",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx",[],["204","205"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx",["206","207"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { navigate, Redirect } from \"@reach/router\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Copyright from \"./common/copyRight\";\r\nimport Register from \"./register\";\r\nimport { authReceived, login, isLoading } from \"../store/auth\";\r\nimport auth from \"../services/authService\";\r\nimport http from \"../services/httpService\";\r\nimport loginValidationSchema from \"../validation/login\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  loader: {\r\n    marginRight: 5,\r\n  },\r\n}));\r\n\r\nexport interface LoginProps extends RouteComponentProps {}\r\n\r\nconst defaultValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\ntype LoginFields = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nconst Login: React.FC<LoginProps> = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(isLoading);\r\n  const { control, errors, handleSubmit } = useForm<LoginFields>({\r\n    defaultValues,\r\n    resolver: yupResolver(loginValidationSchema),\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<LoginFields> = async (data) => {\r\n    await dispatch(login(data));\r\n    http.setJwt(auth.getJwt());\r\n    dispatch(authReceived(auth.getCurrentUser()));\r\n    navigate(\"/news-feed\");\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  if (auth.getCurrentUser()) return <Redirect to=\"/news-feed\" noThrow />;\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          noValidate\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <Controller\r\n            control={control}\r\n            name=\"email\"\r\n            as={\r\n              <TextField\r\n                error={errors.email ? true : false}\r\n                disabled={loading}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                helperText={errors.email ? errors.email.message : \"\"}\r\n              />\r\n            }\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name=\"password\"\r\n            as={\r\n              <TextField\r\n                error={errors.password ? true : false}\r\n                disabled={loading}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                helperText={errors.password ? errors.password.message : \"\"}\r\n              />\r\n            }\r\n          />\r\n          {/* <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          /> */}\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            {loading && (\r\n              <CircularProgress size={20} className={classes.loader} />\r\n            )}\r\n            Sign In\r\n          </Button>\r\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            {/* <Grid item xs>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid> */}\r\n            <Grid item>\r\n              {loading ? (\r\n                \"\"\r\n              ) : (\r\n                <Link href=\"#\" variant=\"body2\" onClick={handleRegister}>\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n      <Register open={open} setOpen={setOpen} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx",["208","209","210"],"import React, { useState, useEffect } from \"react\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\r\nimport Search from \"./search\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUser, logout } from \"../../store/auth\";\r\nimport { IAuthUser } from \"../../interfaces/auth\";\r\nimport {\r\n  getFriends,\r\n  loadFriendRequestNotifications,\r\n} from \"../../store/friends\";\r\nimport auth from \"../../services/authService\";\r\nimport { getInitials, getProfileName } from \"./../../utils/utils\";\r\nimport { getProfilePicture } from \"../../store/users\";\r\nimport { IUserSearched } from \"../../interfaces/users\";\r\nimport { search } from \"../../services/searchFriendService\";\r\nimport Notifications from \"../common/notifications\";\r\nimport { useUserData } from \"../../custom_hooks/useUserData\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      display: \"none\",\r\n      cursor: \"pointer\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"block\",\r\n      },\r\n    },\r\n    sectionDesktop: {\r\n      display: \"none\",\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        display: \"flex\",\r\n      },\r\n    },\r\n    sectionMobile: {\r\n      display: \"flex\",\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    userName: {\r\n      marginLeft: \"10px\",\r\n    },\r\n    customBadge: {\r\n      backgroundColor: \"#44b700\",\r\n    },\r\n  })\r\n);\r\n\r\nexport interface NavBarProps {}\r\n\r\nconst NavBar: React.FC<NavBarProps> = () => {\r\n  const dispatch = useDispatch();\r\n  const user: IAuthUser | null = useSelector(getUser);\r\n  const userId = useUserData(user, \"id\");\r\n  const name = useUserData(user, \"fullName\");\r\n  const profilePicture = useSelector(getProfilePicture)(userId);\r\n  const friendRequest = useSelector(getFriends)(userId);\r\n  const [friendRequestBadge, setFriendRequestBadge] = useState<number>(0);\r\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\r\n  const [searchResults, setSearchResults] = useState<IUserSearched[]>();\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [\r\n    mobileMoreAnchorEl,\r\n    setMobileMoreAnchorEl,\r\n  ] = React.useState<null | HTMLElement>(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  useEffect((): any => {\r\n    async function searchFriend() {\r\n      setSearchResults(await search(searchQuery));\r\n    }\r\n    searchFriend();\r\n  }, [searchQuery]);\r\n\r\n  useEffect((): any => {\r\n    dispatch(loadFriendRequestNotifications());\r\n    //TODO: fix timeOut still running after logout\r\n    // setTimeout(() => {\r\n    //   console.log(\"notifications being run every minute\");\r\n    //   dispatch(loadFriendRequestNotifications());\r\n    // }, 60000);\r\n  }, [dispatch]);\r\n\r\n  useEffect((): any => {\r\n    if (friendRequest.length > 0) {\r\n      setFriendRequestBadge(\r\n        friendRequest.filter((request) => request.status === \"requested\").length\r\n      );\r\n    } else {\r\n      setFriendRequestBadge(0);\r\n    }\r\n  }, [friendRequest]);\r\n\r\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  const handleProfileOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    let userData: IAuthUser = {};\r\n    let profileNameUrl: string = \"\";\r\n    if (user) {\r\n      userData = user;\r\n      profileNameUrl = getProfileName(userData);\r\n    }\r\n    navigate(`/${profileNameUrl}`, { state: { userData } });\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    auth.logout();\r\n    dispatch(logout(userId));\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const friendRequestNotifications = () => {\r\n    return friendRequest.filter((request) => request.status === \"requested\");\r\n  };\r\n\r\n  const menuId = \"primary-search-account-menu\";\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleProfileOpen}>Profile</MenuItem>\r\n      {/* <MenuItem onClick={handleMenuClose}>My account</MenuItem> */}\r\n      <MenuItem onClick={handleLogout}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      {/* <MenuItem>\r\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"secondary\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem> */}\r\n      {/* <MenuItem>\r\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\r\n          <Badge badgeContent={11} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem> */}\r\n      <MenuItem onClick={handleProfileOpen}>\r\n        <IconButton aria-label=\"current user\" color=\"inherit\">\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleLogout}>\r\n        <IconButton aria-label=\"current user logout\" color=\"inherit\">\r\n          <ExitToAppIcon />\r\n        </IconButton>\r\n        <p>Logout</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          {/* <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography\r\n            className={classes.title}\r\n            variant=\"h6\"\r\n            noWrap\r\n            onClick={() => {\r\n              setSearchQuery(\"\");\r\n              navigate(\"/news-feed\");\r\n            }}\r\n          >\r\n            People Connects\r\n          </Typography>\r\n          <Search\r\n            handleSearch={handleSearch}\r\n            searchResults={!searchResults ? [] : searchResults}\r\n            searchQuery={searchQuery}\r\n            setSearchQuery={setSearchQuery}\r\n          />\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              aria-label=\"show 4 new mails\"\r\n              color=\"inherit\"\r\n              onClick={handleProfileOpen}\r\n            >\r\n              {profilePicture ? (\r\n                <Badge\r\n                  classes={{ badge: classes.customBadge }}\r\n                  overlap=\"circle\"\r\n                  badgeContent=\" \"\r\n                  variant=\"dot\"\r\n                  anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                >\r\n                  <Avatar alt={profilePicture.name} src={profilePicture.url} />\r\n                </Badge>\r\n              ) : (\r\n                <Badge\r\n                  classes={{ badge: classes.customBadge }}\r\n                  overlap=\"circle\"\r\n                  badgeContent=\" \"\r\n                  variant=\"dot\"\r\n                  anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                >\r\n                  <Avatar>{getInitials(name)}</Avatar>\r\n                </Badge>\r\n              )}\r\n              <Typography variant=\"h6\" className={classes.userName}>\r\n                {user && user.firstName}\r\n              </Typography>\r\n            </IconButton>\r\n            {/* <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n              <Badge badgeContent={4} color=\"secondary\">\r\n                <MailIcon />\r\n              </Badge>\r\n            </IconButton> */}\r\n            <Notifications\r\n              friendRequest={friendRequestNotifications()}\r\n              friendRequestBadge={friendRequestBadge}\r\n            />\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls={menuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx",["211","212","213"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\friends.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\notifications.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\styledBadge.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\friendsListDrawer.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\chatBox.tsx",["214","215"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport StyledBadge from \"./styledBadge\";\r\nimport MinimizeIcon from \"@material-ui/icons/Minimize\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Emoji from \"react-emoji-render\";\r\nimport { Picker, BaseEmoji } from \"emoji-mart\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InsertEmoticonTwoToneIcon from \"@material-ui/icons/InsertEmoticonTwoTone\";\r\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport { IAcceptedFriend } from \"../../interfaces/friends\";\r\nimport { getUser } from \"../../store/auth\";\r\nimport { IAuthUser } from \"../../interfaces/auth\";\r\nimport firebase, { db } from \"../../firebase.config\";\r\nimport { orderBy } from \"lodash\";\r\nimport { isOnline } from \"../../utils/utils\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: \"40ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: 0,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n    title: {\r\n      color: \"black\",\r\n    },\r\n    subheader: { marginRight: 100 },\r\n    cardHeader: {\r\n      backgroundColor: \"#757de8\",\r\n    },\r\n    cardActions: {\r\n      backgroundColor: \"white\",\r\n      border: \"1px solid\",\r\n    },\r\n    minimizedChatBox: {\r\n      marginTop: 350,\r\n    },\r\n    cardContentMessages: { height: 300, overflow: \"auto\" },\r\n    smallAvatar: {\r\n      width: theme.spacing(3),\r\n      height: theme.spacing(3),\r\n    },\r\n    card: {\r\n      maxWidth: 150,\r\n      height: \"auto\",\r\n    },\r\n  })\r\n);\r\n\r\nexport interface ChatBoxProps {\r\n  friendData: IAcceptedFriend;\r\n  setFriendData: React.Dispatch<React.SetStateAction<IAcceptedFriend[]>>;\r\n}\r\n\r\nconst ChatBox: React.FC<ChatBoxProps> = ({\r\n  friendData,\r\n  setFriendData,\r\n}: ChatBoxProps) => {\r\n  const classes = useStyles();\r\n  const [minimize, setMinimize] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState<firebase.firestore.DocumentData[]>(\r\n    []\r\n  );\r\n  const [firstSnapShotMsg, setFirstSnapShotMsg] = useState<\r\n    firebase.firestore.DocumentData[]\r\n  >([]);\r\n  const [secondSnapShotMsg, setSecondSnapShotMsg] = useState<\r\n    firebase.firestore.DocumentData[]\r\n  >([]);\r\n  const messageListRef = useRef<HTMLDivElement>(null);\r\n  const authUser: IAuthUser | null = useSelector(getUser);\r\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  useEffect((): any => {\r\n    // scroll to bottom when message list overlaps the card content height\r\n    if (messageListRef.current)\r\n      messageListRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"nearest\",\r\n      });\r\n  });\r\n\r\n  useEffect((): any => {\r\n    setMessages(\r\n      orderBy(\r\n        [...firstSnapShotMsg, ...secondSnapShotMsg],\r\n        [\"createdAt\"],\r\n        [\"asc\"]\r\n      )\r\n    );\r\n  }, [firstSnapShotMsg, secondSnapShotMsg]);\r\n\r\n  useEffect((): any => {\r\n    if (authUser && authUser._id) {\r\n      // because firestore queries doesnt have a logical OR operator\r\n      // two queries are made which has different order of userIds\r\n      // inside the participants field.\r\n      db.collection(\"messages\")\r\n        .where(\"participants\", \"in\", [[authUser._id, friendData._id]])\r\n        .onSnapshot((snapshot) => {\r\n          setFirstSnapShotMsg(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n\r\n      db.collection(\"messages\")\r\n        .where(\"participants\", \"in\", [[friendData._id, authUser._id]])\r\n        .onSnapshot((snapshot) => {\r\n          setSecondSnapShotMsg(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n  }, [authUser, friendData._id]);\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleEmojiSelect = (emoji: BaseEmoji) => {\r\n    if (emoji && emoji.colons) setInput(`${input} ${emoji.native} `);\r\n  };\r\n\r\n  const sendMessage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    if (input) {\r\n      if (authUser && authUser._id && authUser.fullName) {\r\n        const payload = {\r\n          message: input,\r\n          participants: [authUser._id, friendData._id],\r\n          createdAt: firebase.firestore.Timestamp.fromDate(new Date()),\r\n          sentBy: { id: authUser._id, fullName: authUser.fullName },\r\n        };\r\n        db.collection(\"messages\").add(payload);\r\n\r\n        setMessages([...messages, payload]);\r\n      }\r\n\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFriendData((data) => {\r\n      const index = data.findIndex((friend) => friend._id === friendData._id);\r\n      data.splice(index, 1);\r\n      return [...data];\r\n    });\r\n  };\r\n\r\n  const toggleMinimize = () => {\r\n    setMinimize(minimize ? false : true);\r\n  };\r\n\r\n  const handleOpenEmojiPicker = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseEmojiPicker = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const renderEmojiPopover = () => {\r\n    return (\r\n      // FIX: popover disables scrolling better to use popper\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorReference=\"anchorPosition\"\r\n        anchorPosition={{ top: 450, left: 1643 }}\r\n        onClose={handleCloseEmojiPicker}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n      >\r\n        {/* TODO: make this picker a reusable component */}\r\n        <Picker set=\"facebook\" onSelect={handleEmojiSelect} title=\"\" />\r\n      </Popover>\r\n    );\r\n  };\r\n\r\n  const messageTime = (createdAt: firebase.firestore.Timestamp) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    };\r\n\r\n    return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\">\r\n        {createdAt.toDate().toLocaleString(\"en-US\", options)}\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const listItem = () => {\r\n    return messages.map((data, index) => {\r\n      const key = index + \"\" + data.participants.join(\"\");\r\n\r\n      return authUser && data.sentBy && authUser._id !== data.sentBy.id ? (\r\n        <ListItem alignItems=\"flex-start\" key={key}>\r\n          <Grid>\r\n            <Grid item xs={12}>\r\n              <Card\r\n                className={classes.card}\r\n                style={{ backgroundColor: \"#e9e9eb\" }}\r\n              >\r\n                <CardContent>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item>\r\n                      <Avatar\r\n                        alt={friendData.fullName}\r\n                        src={\r\n                          friendData.profilePicture &&\r\n                          friendData.profilePicture.url\r\n                        }\r\n                        className={classes.smallAvatar}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <div style={{ wordWrap: \"break-word\" }}>\r\n                        <Emoji text={data.message} />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {messageTime(data.createdAt)}\r\n            </Grid>\r\n          </Grid>\r\n        </ListItem>\r\n      ) : (\r\n        <ListItem\r\n          key={key}\r\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n        >\r\n          <Grid>\r\n            <Grid item xs={12}>\r\n              <Card\r\n                className={classes.card}\r\n                style={{ backgroundColor: \"#0b81ff\" }}\r\n              >\r\n                <CardContent>\r\n                  <Grid item xs={12}>\r\n                    <div style={{ wordWrap: \"break-word\" }}>\r\n                      <Emoji text={data.message} />\r\n                    </div>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {messageTime(data.createdAt)}\r\n            </Grid>\r\n          </Grid>\r\n        </ListItem>\r\n      );\r\n    });\r\n  };\r\n\r\n  return !minimize ? (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardHeader\r\n        className={classes.cardHeader}\r\n        classes={{ title: classes.title }}\r\n        avatar={\r\n          <StyledBadge\r\n            overlap=\"circle\"\r\n            invisible={isOnline(friendData.status)}\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"right\",\r\n            }}\r\n            variant=\"dot\"\r\n          >\r\n            <Avatar\r\n              aria-label=\"avatar\"\r\n              src={friendData.profilePicture && friendData.profilePicture.url}\r\n              alt={friendData.fullName}\r\n            />\r\n          </StyledBadge>\r\n        }\r\n        action={\r\n          <>\r\n            <IconButton\r\n              aria-label=\"minimize\"\r\n              size=\"small\"\r\n              onClick={toggleMinimize}\r\n            >\r\n              <MinimizeIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"close\" size=\"small\" onClick={handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </>\r\n        }\r\n        title={friendData.fullName}\r\n        subheader={friendData.status === \"active\" ? \"active now\" : \"\"}\r\n      />\r\n      <CardContent className={classes.cardContentMessages}>\r\n        <div ref={messageListRef}>\r\n          <List>{listItem()}</List>\r\n        </div>\r\n      </CardContent>\r\n      <CardActions>\r\n        {renderEmojiPopover()}\r\n        <form noValidate autoComplete=\"off\">\r\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            {/* Make sending image in chat work */}\r\n            {/* <Grid item xs={2}>\r\n              <input\r\n                accept=\"image/*\"\r\n                id=\"post-uploads\"\r\n                multiple\r\n                type=\"file\"\r\n                style={{ display: \"none\" }}\r\n              />\r\n              <label htmlFor=\"post-uploads\">\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  aria-label=\"upload picture\"\r\n                  component=\"span\"\r\n                >\r\n                  <InsertPhotoIcon />\r\n                </IconButton>\r\n              </label>\r\n            </Grid> */}\r\n            <Grid item xs={10}>\r\n              <FormControl size=\"small\">\r\n                <OutlinedInput\r\n                  value={input}\r\n                  onChange={handleInput}\r\n                  id=\"chatbox-message\"\r\n                  placeholder=\"Aa\"\r\n                  autoComplete=\"off\"\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"emoji picker\"\r\n                        onClick={handleOpenEmojiPicker}\r\n                      >\r\n                        <InsertEmoticonTwoToneIcon\r\n                          style={{ color: \"#af861f\" }}\r\n                        />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <IconButton\r\n                disabled={!input}\r\n                color=\"primary\"\r\n                aria-label=\"send message\"\r\n                type=\"submit\"\r\n                onClick={sendMessage}\r\n              >\r\n                <SendIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </CardActions>\r\n    </Card>\r\n  ) : (\r\n    <Tooltip title={friendData.fullName} placement=\"top\" arrow>\r\n      <IconButton\r\n        aria-label=\"minimize\"\r\n        className={classes.minimizedChatBox}\r\n        onClick={toggleMinimize}\r\n      >\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          invisible={isOnline(friendData.status)}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"right\",\r\n          }}\r\n          variant=\"dot\"\r\n        >\r\n          <Avatar\r\n            aria-label=\"avatar\"\r\n            src={friendData.profilePicture && friendData.profilePicture.url}\r\n            alt={friendData.fullName}\r\n          />\r\n        </StyledBadge>\r\n      </IconButton>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\register.tsx",["216"],"import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport DatePicker from \"./common/datePicker\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { registerUser } from \"../store/users\";\r\nimport { IRegisterUser } from \"../interfaces/users\";\r\nimport registrationValiditionSchema from \"../validation/registration\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport interface RegisterProps {\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst defaultValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  birthDate: new Date(),\r\n  gender: \"\",\r\n};\r\n\r\nconst Register: React.FC<RegisterProps> = ({\r\n  open,\r\n  setOpen,\r\n}: RegisterProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    control,\r\n    errors,\r\n    handleSubmit,\r\n    reset,\r\n    clearErrors,\r\n    formState: { isSubmitSuccessful },\r\n  } = useForm<IRegisterUser>({\r\n    defaultValues,\r\n    resolver: yupResolver(registrationValiditionSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isSubmitSuccessful) reset(defaultValues);\r\n  }, [isSubmitSuccessful, open, reset]);\r\n\r\n  const onSubmit: SubmitHandler<IRegisterUser> = (data) => {\r\n    dispatch(registerUser(data));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    reset(defaultValues);\r\n    clearErrors();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        open={open}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          Sign Up\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            className={classes.closeButton}\r\n            onClick={handleClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <Divider variant=\"middle\" />\r\n        <DialogContent>\r\n          <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"firstName\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.firstName ? true : false}\r\n                      required\r\n                      label=\"First name\"\r\n                      id=\"register-firstName\"\r\n                      placeholder=\"First name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.firstName ? errors.firstName.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"lastName\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.lastName ? true : false}\r\n                      required\r\n                      label=\"Last name\"\r\n                      id=\"register-lastName\"\r\n                      placeholder=\"Last name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.lastName ? errors.lastName.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"email\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.email ? true : false}\r\n                      required\r\n                      label=\"Email\"\r\n                      id=\"register-email\"\r\n                      placeholder=\"Email\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={errors.email ? errors.email.message : \"\"}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"password\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.password ? true : false}\r\n                      required\r\n                      id=\"register-password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.password ? errors.password.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"birthDate\"\r\n                  render={(props) => (\r\n                    <DatePicker value={props.value} onChange={props.onChange} />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"gender\"\r\n                  as={\r\n                    <TextField\r\n                      required\r\n                      id=\"register-gender\"\r\n                      select\r\n                      label=\"Select Gender\"\r\n                      defaultValue=\"\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select Gender\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Male\">Male</MenuItem>\r\n                      <MenuItem value=\"Female\">Female</MenuItem>\r\n                      <MenuItem value=\"Unspecified\">\r\n                        Prefer not to specify\r\n                      </MenuItem>\r\n                    </TextField>\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Sign Up\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\datePicker.tsx",["217"],"import \"date-fns\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\nexport interface DatePickerProps {\r\n  value: Date;\r\n  onChange: () => void;\r\n}\r\n\r\nconst DatePicker: React.FC<DatePickerProps> = ({\r\n  value,\r\n  onChange,\r\n}: DatePickerProps) => {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        {/* <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"MM/dd/yyyy\"\r\n          margin=\"normal\"\r\n          id=\"date-picker-inline\"\r\n          label=\"Date picker inline\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        /> */}\r\n        <KeyboardDatePicker\r\n          required\r\n          margin=\"normal\"\r\n          id=\"birthday\"\r\n          label=\"Birthday\"\r\n          format=\"MM/dd/yyyy\"\r\n          value={value}\r\n          onChange={onChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        />\r\n        {/* <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Time picker\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change time\",\r\n          }}\r\n        /> */}\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\registration.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\login.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\custom_hooks\\useUserData.ts",[],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":24},{"ruleId":"222","severity":1,"message":"226","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"227","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"228","line":14,"column":8,"nodeType":"224","messageId":"225","endLine":14,"endColumn":16},{"ruleId":"222","severity":1,"message":"229","line":16,"column":8,"nodeType":"224","messageId":"225","endLine":16,"endColumn":25},{"ruleId":"222","severity":1,"message":"230","line":115,"column":7,"nodeType":"224","messageId":"225","endLine":115,"endColumn":20},{"ruleId":"222","severity":1,"message":"231","line":139,"column":10,"nodeType":"224","messageId":"225","endLine":139,"endColumn":24},{"ruleId":"222","severity":1,"message":"232","line":140,"column":10,"nodeType":"224","messageId":"225","endLine":140,"endColumn":19},{"ruleId":"222","severity":1,"message":"233","line":10,"column":8,"nodeType":"224","messageId":"225","endLine":10,"endColumn":14},{"ruleId":"222","severity":1,"message":"234","line":26,"column":8,"nodeType":"224","messageId":"225","endLine":26,"endColumn":23},{"ruleId":"222","severity":1,"message":"235","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"222","severity":1,"message":"236","line":7,"column":3,"nodeType":"224","messageId":"225","endLine":7,"endColumn":21},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"@typescript-eslint/no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'MenuIcon' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'DialogActions' is assigned a value but never used.","'profilePicture' is assigned a value but never used.","'imageData' is assigned a value but never used.","'Button' is defined but never used.","'InsertPhotoIcon' is defined but never used.","'useState' is defined but never used.","'KeyboardTimePicker' is defined but never used.","no-global-assign","no-unsafe-negation"]