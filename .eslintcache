[{"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx":"1","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts":"2","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx":"3","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx":"4","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx":"5","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx":"6","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts":"7","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts":"8","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts":"9","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts":"10","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts":"11","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts":"12","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts":"13","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx":"14","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts":"15","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx":"16","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx":"17","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts":"18","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts":"19","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx":"20","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts":"21","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts":"22","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts":"23","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx":"24","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts":"25","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts":"26","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx":"27","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx":"28","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx":"29","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx":"30","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx":"31","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts":"32","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx":"33","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx":"34","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx":"35","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx":"36","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx":"37","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts":"38","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx":"39"},{"size":744,"mtime":1609152994118,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":499162500000,"results":"42","hashOfConfig":"41"},{"size":1000,"mtime":1609731373627,"results":"43","hashOfConfig":"41"},{"size":4394,"mtime":1609730637740,"results":"44","hashOfConfig":"41"},{"size":466,"mtime":1608081805151,"results":"45","hashOfConfig":"41"},{"size":1615,"mtime":1611286711840,"results":"46","hashOfConfig":"41"},{"size":351,"mtime":1609881888221,"results":"47","hashOfConfig":"41"},{"size":444,"mtime":1608275930106,"results":"48","hashOfConfig":"41"},{"size":873,"mtime":1612137878206,"results":"49","hashOfConfig":"41"},{"size":2009,"mtime":1610574217583,"results":"50","hashOfConfig":"41"},{"size":963,"mtime":1609232899277,"results":"51","hashOfConfig":"41"},{"size":553,"mtime":1609595749043,"results":"52","hashOfConfig":"41"},{"size":541,"mtime":1608720934917,"results":"53","hashOfConfig":"41"},{"size":520,"mtime":1609732989926,"results":"54","hashOfConfig":"41"},{"size":1255,"mtime":1608197531583,"results":"55","hashOfConfig":"41"},{"size":8587,"mtime":1612146953392,"results":"56","hashOfConfig":"41"},{"size":897,"mtime":1609890737444,"results":"57","hashOfConfig":"41"},{"size":4249,"mtime":1610574981079,"results":"58","hashOfConfig":"41"},{"size":1434,"mtime":1610577583455,"results":"59","hashOfConfig":"41"},{"size":6440,"mtime":1611303486989,"results":"60","hashOfConfig":"41"},{"size":3806,"mtime":1611299619800,"results":"61","hashOfConfig":"41"},{"size":1637,"mtime":1610574278412,"results":"62","hashOfConfig":"41"},{"size":633,"mtime":1608950011533,"results":"63","hashOfConfig":"41"},{"size":1635,"mtime":1610574626850,"results":"64","hashOfConfig":"41"},{"size":3019,"mtime":1610574544329,"results":"65","hashOfConfig":"41"},{"size":2978,"mtime":1610574796713,"results":"66","hashOfConfig":"41"},{"size":4017,"mtime":1611301668052,"results":"67","hashOfConfig":"41"},{"size":6249,"mtime":1611285389998,"results":"68","hashOfConfig":"41"},{"size":5902,"mtime":1611304046779,"results":"69","hashOfConfig":"41"},{"size":8904,"mtime":1611303723013,"results":"70","hashOfConfig":"41"},{"size":9361,"mtime":1610575544861,"results":"71","hashOfConfig":"41"},{"size":3221,"mtime":1612135410414,"results":"72","hashOfConfig":"41"},{"size":488,"mtime":1609731571774,"results":"73","hashOfConfig":"41"},{"size":5912,"mtime":1610577757276,"results":"74","hashOfConfig":"41"},{"size":1188,"mtime":1611282661133,"results":"75","hashOfConfig":"41"},{"size":4016,"mtime":1611289742471,"results":"76","hashOfConfig":"41"},{"size":2922,"mtime":1612147530625,"results":"77","hashOfConfig":"41"},{"size":423,"mtime":1612146937607,"results":"78","hashOfConfig":"41"},{"size":2524,"mtime":1612147549355,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"10t8t05",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx",[],["162","163"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx",["164"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx",["165"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { orderBy } from \"lodash\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  getComments,\r\n  deleteComment,\r\n  getSingleComment,\r\n  editComment,\r\n} from \"../store/comments\";\r\nimport { IComment } from \"../interfaces/comments\";\r\nimport { getUser } from \"../store/users\";\r\nimport { getDate, getProfileName } from \"../utils/utils\";\r\nimport PostMenu from \"./common/postMenu\";\r\nimport DeleteModal from \"./common/deleteModal\";\r\nimport ProfileAvatar from \"./common/profileAvatar\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n    radius: {\r\n      borderRadius: \"5px\",\r\n      backgroundColor: \"#eceff1\",\r\n    },\r\n  })\r\n);\r\n\r\nexport interface CommentProps {\r\n  postId: string;\r\n  userId: string;\r\n}\r\n\r\nconst Comment: React.FC<CommentProps> = ({ postId, userId }: CommentProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const userProfile = useSelector(getUser);\r\n  const comments: IComment[] = useSelector(getComments)(postId);\r\n  const sorted = orderBy(comments, [\"createdAt\"], [\"desc\"]);\r\n  const [openDeleteCommentModal, setOpenDeleteCommentModal] = useState(false);\r\n  const [commentId, setCommentId] = useState(\"\");\r\n  const [editCommentId, setEditCommentId] = useState(\"\");\r\n  const userComment = useSelector(getSingleComment)(editCommentId);\r\n  const [editUserComment, setEditUserComment] = useState(\"\");\r\n\r\n  useEffect((): any => {\r\n    if (userComment) setEditUserComment(userComment.comment);\r\n  }, [userComment]);\r\n\r\n  const handleEditComment = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.key === \"Enter\" && editUserComment !== \"\") {\r\n      dispatch(\r\n        editComment({ id: editCommentId, updatedComment: editUserComment })\r\n      );\r\n      setEditUserComment(\"\");\r\n      setEditCommentId(\"\");\r\n    }\r\n  };\r\n\r\n  const handleProfileOpen = (id: string) => {\r\n    const user = userProfile(id);\r\n    let userData: object = {};\r\n    let profileNameUrl: string = \"\";\r\n    if (user) {\r\n      userData = user;\r\n      profileNameUrl = getProfileName(userData);\r\n    }\r\n    navigate(`/${profileNameUrl}`, { state: { userData } });\r\n  };\r\n\r\n  const handleDeleteComment = (id: string) => {\r\n    dispatch(deleteComment(id));\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEditUserComment(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List className={classes.root}>\r\n        {sorted.map((comment) => {\r\n          return (\r\n            <React.Fragment key={comment._id}>\r\n              <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                  <ProfileAvatar\r\n                    userId={comment.createdBy._id}\r\n                    fullName={comment.createdBy.fullName}\r\n                    handleProfileOpen={handleProfileOpen}\r\n                  />\r\n                </ListItemAvatar>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={11}>\r\n                    <Box px={1} py={1} className={classes.radius}>\r\n                      {userComment ? (\r\n                        <>\r\n                          <Grid item xs={12}>\r\n                            <Typography>\r\n                              {comment.createdBy.firstName}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <TextField\r\n                              id=\"standard-basic\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              onChange={handleChange}\r\n                              onKeyDown={handleEditComment}\r\n                              value={editUserComment}\r\n                            />\r\n                          </Grid>\r\n                        </>\r\n                      ) : (\r\n                        <ListItemText\r\n                          primary={comment.createdBy.firstName}\r\n                          secondary={\r\n                            <Typography\r\n                              component=\"span\"\r\n                              variant=\"body2\"\r\n                              className={classes.inline}\r\n                              color=\"textPrimary\"\r\n                            >\r\n                              {comment.comment}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    {userId === comment.createdBy._id ? (\r\n                      <PostMenu\r\n                        commentId={comment._id}\r\n                        setCommentId={setCommentId}\r\n                        setEditCommentId={setEditCommentId}\r\n                        setOpenDeleteCommentModal={setOpenDeleteCommentModal}\r\n                      />\r\n                    ) : null}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n                      {getDate(comment.createdAt)}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n      <DeleteModal\r\n        commentId={commentId}\r\n        open={openDeleteCommentModal}\r\n        setOpenDeleteCommentModal={setOpenDeleteCommentModal}\r\n        handleDeleteComment={handleDeleteComment}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx",["166"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { orderBy } from \"lodash\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\r\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  postCommentIncremented,\r\n  likePost,\r\n  deletePost,\r\n} from \"../../store/posts\";\r\nimport { IPost, IPostImages } from \"../../interfaces/posts\";\r\nimport {\r\n  loadComments,\r\n  createComment,\r\n  didCommentFailed,\r\n} from \"../../store/comments\";\r\nimport { IImage } from \"../../interfaces/images\";\r\nimport { addLike } from \"../../store/likes\";\r\nimport { getDate, getProfileName } from \"../../utils/utils\";\r\nimport { getUser } from \"../../store/users\";\r\nimport Comment from \"../comment\";\r\nimport ImageUploadGrid from \"../imageUploadGrid\";\r\nimport PostMenu from \"./postMenu\";\r\nimport ProfileAvatar from \"../common/profileAvatar\";\r\nimport DeleteModal from \"../common/deleteModal\";\r\n\r\nexport interface PostCardProps {\r\n  posts: IPost[];\r\n  images: IImage[];\r\n  userId: string;\r\n  setPostId?: React.Dispatch<React.SetStateAction<string>>;\r\n  setOpenModal?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      margin: `${theme.spacing(1)}px auto`,\r\n      padding: theme.spacing(2),\r\n    },\r\n    avatar: {\r\n      marginTop: 140,\r\n      width: 180,\r\n      height: 180,\r\n    },\r\n    card: {\r\n      minWidth: 275,\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n    postContent: {\r\n      textAlign: \"left\",\r\n    },\r\n    commentsCount: {\r\n      borderBottom: \"1px solid\",\r\n    },\r\n    link: {\r\n      cursor: \"pointer\",\r\n    },\r\n  })\r\n);\r\n\r\nconst PostCard: React.FC<PostCardProps> = ({\r\n  posts,\r\n  userId,\r\n  images,\r\n  setPostId,\r\n  setOpenModal,\r\n}: PostCardProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const isFailed = useSelector(didCommentFailed);\r\n  const userProfile = useSelector(getUser);\r\n  const sorted = orderBy(posts, [\"createdAt\"], [\"desc\"]);\r\n  const [show, setShow] = useState(false);\r\n  const [id, setId] = useState(\"\");\r\n  const [comment, setComment] = useState(\"\");\r\n  const [openDeletePostModal, setOpenDeletePostModal] = useState(false);\r\n\r\n  const onKeyEnter = (e: React.KeyboardEvent<HTMLDivElement>, post: string) => {\r\n    if (e.key === \"Enter\" && comment !== \"\") {\r\n      dispatch(createComment({ userId, post, comment }));\r\n      if (!isFailed) dispatch(postCommentIncremented({ post }));\r\n      setComment(\"\");\r\n    }\r\n  };\r\n\r\n  const handleLike = (postId: string) => {\r\n    dispatch(likePost({ postId, userId }));\r\n    dispatch(addLike({ postId, userId }));\r\n  };\r\n\r\n  const onClickShowComments = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n    postId: string\r\n  ) => {\r\n    e.preventDefault();\r\n    setShow(true);\r\n    setId(postId);\r\n    dispatch(loadComments(postId));\r\n  };\r\n\r\n  const handleComment = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setComment(e.target.value);\r\n  };\r\n\r\n  const handleEditPost = (postId: string) => {\r\n    if (setOpenModal && setPostId) {\r\n      setOpenModal(true);\r\n      setPostId(postId);\r\n    }\r\n  };\r\n\r\n  const handleDeletePost = (postId: string) => {\r\n    dispatch(deletePost(postId));\r\n  };\r\n\r\n  const handleProfileOpen = (id: string) => {\r\n    const user = userProfile(id);\r\n    let userData: object = {};\r\n    let profileNameUrl: string = \"\";\r\n    if (user) {\r\n      userData = user;\r\n      profileNameUrl = getProfileName(userData);\r\n    }\r\n    navigate(`/${profileNameUrl}`, { state: { userData } });\r\n  };\r\n\r\n  const getLikes = (likes: number) => {\r\n    if (likes) {\r\n      const likesCount =\r\n        likes === 0 ? \"\" : likes === 1 ? `${likes} like` : `${likes} likes`;\r\n      return <Typography align=\"left\">{likesCount}</Typography>;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const getCommentsCount = (count: number) => {\r\n    const commentsCount =\r\n      count === 1 ? `${count} Comment` : count > 1 ? `${count} Comments` : \"\";\r\n    return <Typography align=\"right\">{commentsCount}</Typography>;\r\n  };\r\n\r\n  const displayPostImage = (postImages: IPostImages[]) => {\r\n    if (postImages && postImages.length > 0) {\r\n      if (postImages.length === 1) {\r\n        return <ImageUploadGrid images={postImages} cols={1} />;\r\n      } else if (images.length === 2) {\r\n        return <ImageUploadGrid images={postImages} cols={2} />;\r\n      } else {\r\n        return <ImageUploadGrid images={postImages} cols={2} />;\r\n      }\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {sorted.map((post) => (\r\n        <Box mt={2} bgcolor=\"background.paper\" key={post._id}>\r\n          <Card className={classes.card}>\r\n            <CardContent className={classes.postContent}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item>\r\n                  <ProfileAvatar\r\n                    userId={post.postedBy._id}\r\n                    fullName={post.postedBy.fullName}\r\n                    handleProfileOpen={handleProfileOpen}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    className={classes.link}\r\n                    onClick={() => handleProfileOpen(post.postedBy._id)}\r\n                  >\r\n                    {post.postedBy.fullName}\r\n                  </Typography>\r\n                  <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n                    {getDate(post.createdAt)}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item container justify=\"flex-end\" xs={6}>\r\n                  {userId === post.postedBy._id ? (\r\n                    <PostMenu\r\n                      postId={post._id}\r\n                      handleEditPost={handleEditPost}\r\n                      setPostId={setId}\r\n                      setOpenDeletePostModal={setOpenDeletePostModal}\r\n                    />\r\n                  ) : null}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Box px={7} py={2}>\r\n                  <Typography>{post.post}</Typography>\r\n                  {displayPostImage(post.postImages)}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                {getLikes(post.likes)}\r\n                {getCommentsCount(post.commentCount)}\r\n                <Divider variant=\"fullWidth\" component=\"hr\" />\r\n              </Grid>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    color=\"default\"\r\n                    fullWidth\r\n                    startIcon={<ThumbUpAltIcon />}\r\n                    onClick={() => handleLike(post._id)}\r\n                  >\r\n                    Like\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    color=\"default\"\r\n                    fullWidth\r\n                    startIcon={<ChatBubbleIcon />}\r\n                    onClick={(e) => onClickShowComments(e, post._id)}\r\n                  >\r\n                    Comment\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                {/* does item._id === id have another alternative way?*/}\r\n                {show && post._id === id && (\r\n                  <>\r\n                    <TextField\r\n                      id={post._id}\r\n                      value={comment}\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      placeholder=\"Write a comment...\"\r\n                      onKeyDown={(e) => onKeyEnter(e, post._id)}\r\n                      onChange={handleComment}\r\n                    />\r\n                    <Comment postId={post._id} key={post._id} userId={userId} />\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Box>\r\n      ))}\r\n      <DeleteModal\r\n        postId={id}\r\n        open={openDeletePostModal}\r\n        setOpenDeletePostModal={setOpenDeletePostModal}\r\n        handleDeletePost={handleDeletePost}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx",["167","168"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  createStyles,\r\n  Theme,\r\n  withStyles,\r\n  WithStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport { storage } from \"../firebase.config\";\r\nimport { updateUserProfPic, updateUserCoverPhoto } from \"../store/users\";\r\nimport { IProfPic } from \"../interfaces/profPic\";\r\nimport { IImageData } from \"../interfaces/images\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: \"absolute\",\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n    grid: {\r\n      minWidth: 275,\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n  });\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grid: {\r\n      minWidth: 275,\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n    paper: {\r\n      // maxWidth: 400,\r\n      margin: `${theme.spacing(1)}px auto`,\r\n      padding: theme.spacing(2),\r\n    },\r\n    postContent: {\r\n      textAlign: \"left\",\r\n    },\r\n    avatar: {\r\n      width: 180,\r\n      height: 180,\r\n    },\r\n    input: {\r\n      display: \"none\",\r\n    },\r\n    box: {\r\n      justifyContent: \"center\",\r\n    },\r\n    div: {\r\n      display: \"flex\",\r\n    },\r\n    gridList: {\r\n      width: 700,\r\n    },\r\n  })\r\n);\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport interface EditProfileModalProps {\r\n  open: boolean;\r\n  userId: string;\r\n  profImage: IProfPic;\r\n  cover?: IImageData;\r\n  setopenEditProfileModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({\r\n  open,\r\n  userId,\r\n  profImage,\r\n  cover,\r\n  setopenEditProfileModal,\r\n}: EditProfileModalProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [profilePicture, setProfilePicture] = useState<IProfPic>();\r\n  const [imageData, setImageData] = useState<object[]>();\r\n\r\n  const handleClose = () => {\r\n    setopenEditProfileModal(false);\r\n  };\r\n\r\n  const handleImageUpload = async (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    category: string\r\n  ) => {\r\n    const imageInfo: object[] = [];\r\n    if (e.target.files !== null) {\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        const file = e.target.files[i];\r\n        const data: IImageData = await uploadImage(file);\r\n        if (category === \"avatar\") {\r\n          setProfilePicture(data);\r\n          dispatch(updateUserProfPic(userId, data));\r\n          imageInfo.push(data);\r\n        } else {\r\n          dispatch(updateUserCoverPhoto(userId, data));\r\n        }\r\n      }\r\n    }\r\n    setImageData(imageInfo);\r\n  };\r\n\r\n  const uploadImage = (\r\n    imageFile: Blob | Uint8Array | ArrayBuffer\r\n  ): Promise<IImageData> => {\r\n    return new Promise((resolve, reject) => {\r\n      let currentImageName = `firebase-image-${Date.now()}-${userId}`;\r\n      let uploadImage = storage\r\n        .ref(`images/${currentImageName}`)\r\n        .put(imageFile);\r\n\r\n      uploadImage.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          var progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log(\"Upload is \" + progress + \"% done\");\r\n        },\r\n        (error) => reject(error),\r\n        () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(currentImageName)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              resolve({\r\n                name: currentImageName,\r\n                url,\r\n              });\r\n            });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        // onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Edit Profile\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item container justify=\"flex-start\" xs={6}>\r\n                  <Typography variant=\"h5\">Profile Picture</Typography>\r\n                </Grid>\r\n                <Grid item container justify=\"flex-end\" xs={6}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"avatar-upload\"\r\n                    type=\"file\"\r\n                    onChange={(e) => handleImageUpload(e, \"avatar\")}\r\n                  />\r\n                  <label htmlFor=\"avatar-upload\">\r\n                    <Button\r\n                      // variant=\"contained\"\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      size=\"small\"\r\n                      startIcon={<PhotoIcon />}\r\n                    >\r\n                      Photo\r\n                    </Button>\r\n                  </label>\r\n                </Grid>\r\n              </Grid>\r\n              <Box\r\n                bgcolor=\"secondary.main\"\r\n                p={5}\r\n                display=\"flex\"\r\n                className={classes.box}\r\n              >\r\n                <Avatar\r\n                  className={classes.avatar}\r\n                  alt={profImage.name}\r\n                  src={profImage.url}\r\n                />\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item container justify=\"flex-start\" xs={6}>\r\n                  <Typography variant=\"h5\">Cover Photo</Typography>\r\n                </Grid>\r\n                <Grid item container justify=\"flex-end\" xs={6}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"cover-upload\"\r\n                    type=\"file\"\r\n                    onChange={(e) => handleImageUpload(e, \"cover\")}\r\n                  />\r\n                  <label htmlFor=\"cover-upload\">\r\n                    <Button\r\n                      // variant=\"contained\"\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      size=\"small\"\r\n                      startIcon={<PhotoIcon />}\r\n                    >\r\n                      Photo\r\n                    </Button>\r\n                  </label>\r\n                </Grid>\r\n              </Grid>\r\n              <Box\r\n                bgcolor=\"secondary.main\"\r\n                p={5}\r\n                display=\"flex\"\r\n                className={classes.box}\r\n              >\r\n                {cover ? (\r\n                  // <div className={classes.div}>\r\n                  <GridList\r\n                    cellHeight={300}\r\n                    className={classes.gridList}\r\n                    cols={1}\r\n                  >\r\n                    <GridListTile>\r\n                      <img alt={cover.name} src={cover.url} />\r\n                    </GridListTile>\r\n                  </GridList>\r\n                ) : (\r\n                  // </div>\r\n                  <AccountBoxIcon className={classes.avatar} />\r\n                )}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfileModal;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx",[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":11},{"ruleId":"173","severity":1,"message":"177","line":10,"column":8,"nodeType":"175","messageId":"176","endLine":10,"endColumn":14},{"ruleId":"173","severity":1,"message":"177","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":14},{"ruleId":"173","severity":1,"message":"178","line":139,"column":10,"nodeType":"175","messageId":"176","endLine":139,"endColumn":24},{"ruleId":"173","severity":1,"message":"179","line":140,"column":10,"nodeType":"175","messageId":"176","endLine":140,"endColumn":19},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Avatar' is defined but never used.","'profilePicture' is assigned a value but never used.","'imageData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]