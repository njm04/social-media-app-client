[{"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx":"1","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts":"2","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx":"3","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx":"4","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx":"5","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx":"6","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts":"7","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts":"8","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts":"9","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts":"10","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts":"11","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts":"12","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts":"13","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx":"14","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts":"15","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx":"16","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx":"17","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts":"18","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts":"19","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx":"20","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts":"21","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts":"22","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts":"23","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx":"24","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts":"25","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts":"26","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx":"27","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx":"28","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx":"29","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx":"30","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx":"31","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts":"32","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx":"33","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx":"34","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx":"35","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx":"36","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx":"37","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts":"38","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx":"39","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\friends.ts":"40","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\notifications.tsx":"41","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\styledBadge.tsx":"42","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\friendsListDrawer.tsx":"43","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\chatBox.tsx":"44","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\register.tsx":"45","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\datePicker.tsx":"46","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\registration.ts":"47","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\login.ts":"48"},{"size":744,"mtime":1609152994118,"results":"49","hashOfConfig":"50"},{"size":425,"mtime":499162500000,"results":"51","hashOfConfig":"50"},{"size":1000,"mtime":1614988755171,"results":"52","hashOfConfig":"50"},{"size":5249,"mtime":1615521909903,"results":"53","hashOfConfig":"50"},{"size":469,"mtime":1615763945561,"results":"54","hashOfConfig":"50"},{"size":2976,"mtime":1615335375010,"results":"55","hashOfConfig":"50"},{"size":351,"mtime":1609881888221,"results":"56","hashOfConfig":"50"},{"size":444,"mtime":1608275930106,"results":"57","hashOfConfig":"50"},{"size":873,"mtime":1612137878206,"results":"58","hashOfConfig":"50"},{"size":2271,"mtime":1615441045489,"results":"59","hashOfConfig":"50"},{"size":963,"mtime":1609232899277,"results":"60","hashOfConfig":"50"},{"size":622,"mtime":1613432566943,"results":"61","hashOfConfig":"50"},{"size":541,"mtime":1608720934917,"results":"62","hashOfConfig":"50"},{"size":520,"mtime":1609732989926,"results":"63","hashOfConfig":"50"},{"size":1255,"mtime":1608197531583,"results":"64","hashOfConfig":"50"},{"size":10581,"mtime":1615762847119,"results":"65","hashOfConfig":"50"},{"size":897,"mtime":1609890737444,"results":"66","hashOfConfig":"50"},{"size":4249,"mtime":1610574981079,"results":"67","hashOfConfig":"50"},{"size":1434,"mtime":1610577583455,"results":"68","hashOfConfig":"50"},{"size":6392,"mtime":1612153810148,"results":"69","hashOfConfig":"50"},{"size":3806,"mtime":1611299619800,"results":"70","hashOfConfig":"50"},{"size":1637,"mtime":1610574278412,"results":"71","hashOfConfig":"50"},{"size":701,"mtime":1615763691614,"results":"72","hashOfConfig":"50"},{"size":1635,"mtime":1610574626850,"results":"73","hashOfConfig":"50"},{"size":3082,"mtime":1613798580962,"results":"74","hashOfConfig":"50"},{"size":3024,"mtime":1613880811010,"results":"75","hashOfConfig":"50"},{"size":4017,"mtime":1611301668052,"results":"76","hashOfConfig":"50"},{"size":6249,"mtime":1611285389998,"results":"77","hashOfConfig":"50"},{"size":12064,"mtime":1614652280597,"results":"78","hashOfConfig":"50"},{"size":8856,"mtime":1614987491845,"results":"79","hashOfConfig":"50"},{"size":9369,"mtime":1615762393439,"results":"80","hashOfConfig":"50"},{"size":3945,"mtime":1615516743779,"results":"81","hashOfConfig":"50"},{"size":488,"mtime":1615223800470,"results":"82","hashOfConfig":"50"},{"size":5912,"mtime":1610577757276,"results":"83","hashOfConfig":"50"},{"size":2894,"mtime":1613785982610,"results":"84","hashOfConfig":"50"},{"size":4016,"mtime":1611289742471,"results":"85","hashOfConfig":"50"},{"size":2929,"mtime":1615762899959,"results":"86","hashOfConfig":"50"},{"size":423,"mtime":1612146937607,"results":"87","hashOfConfig":"50"},{"size":2524,"mtime":1612147549355,"results":"88","hashOfConfig":"50"},{"size":6242,"mtime":1615440806010,"results":"89","hashOfConfig":"50"},{"size":6239,"mtime":1613623270373,"results":"90","hashOfConfig":"50"},{"size":979,"mtime":1614391336227,"results":"91","hashOfConfig":"50"},{"size":3922,"mtime":1615494920395,"results":"92","hashOfConfig":"50"},{"size":9566,"mtime":1615436923923,"results":"93","hashOfConfig":"50"},{"size":7948,"mtime":1615521967483,"results":"94","hashOfConfig":"50"},{"size":1645,"mtime":1615513684353,"results":"95","hashOfConfig":"50"},{"size":642,"mtime":1615521951784,"results":"96","hashOfConfig":"50"},{"size":316,"mtime":1615521697126,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"10t8t05",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\index.tsx",[],["199","200"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\reportWebVitals.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\App.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\login.tsx",["201","202"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { navigate, Redirect } from \"@reach/router\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Copyright from \"./common/copyRight\";\r\nimport Register from \"./register\";\r\nimport { authReceived, login } from \"../store/auth\";\r\nimport auth from \"../services/authService\";\r\nimport http from \"../services/httpService\";\r\nimport loginValidationSchema from \"../validation/login\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport interface LoginProps extends RouteComponentProps {}\r\n\r\nconst defaultValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\ntype LoginFields = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nconst Login: React.FC<LoginProps> = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const { control, errors, handleSubmit } = useForm<LoginFields>({\r\n    defaultValues,\r\n    resolver: yupResolver(loginValidationSchema),\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<LoginFields> = async (data) => {\r\n    await dispatch(login(data));\r\n    http.setJwt(auth.getJwt());\r\n    dispatch(authReceived(auth.getCurrentUser()));\r\n    navigate(\"/news-feed\");\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  if (auth.getCurrentUser()) return <Redirect to=\"/news-feed\" noThrow />;\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          noValidate\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <Controller\r\n            control={control}\r\n            name=\"email\"\r\n            as={\r\n              <TextField\r\n                error={errors.email ? true : false}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                helperText={errors.email ? errors.email.message : \"\"}\r\n              />\r\n            }\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name=\"password\"\r\n            as={\r\n              <TextField\r\n                error={errors.password ? true : false}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                helperText={errors.password ? errors.password.message : \"\"}\r\n              />\r\n            }\r\n          />\r\n          {/* <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          /> */}\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            {/* <Grid item xs>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid> */}\r\n            <Grid item>\r\n              <Link href=\"#\" variant=\"body2\" onClick={handleRegister}>\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n      <Register open={open} setOpen={setOpen} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\copyRight.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\newsFeed.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\configureStore.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\reducer.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\httpService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\auth.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\middleware\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\entities.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\api.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\privateRoute.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\authService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\navBar.tsx",["203","204"],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\post.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\posts.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\utils\\utils.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\comment.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\comments.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\commentCount.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\firebase.config.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\imageUploadGrid.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\images.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\likes.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postMenu.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editPostModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\profile.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postCards.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\editProfileModal.tsx",["205","206","207"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  createStyles,\r\n  Theme,\r\n  withStyles,\r\n  WithStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport { storage } from \"../firebase.config\";\r\nimport { updateUserProfPic, updateUserCoverPhoto } from \"../store/users\";\r\nimport { IProfPic } from \"../interfaces/profPic\";\r\nimport { IImageData } from \"../interfaces/images\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: \"absolute\",\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n    grid: {\r\n      minWidth: 275,\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n  });\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grid: {\r\n      minWidth: 275,\r\n      flexGrow: 1,\r\n      overflow: \"hidden\",\r\n      padding: theme.spacing(0, 3),\r\n    },\r\n    paper: {\r\n      // maxWidth: 400,\r\n      margin: `${theme.spacing(1)}px auto`,\r\n      padding: theme.spacing(2),\r\n    },\r\n    postContent: {\r\n      textAlign: \"left\",\r\n    },\r\n    avatar: {\r\n      width: 180,\r\n      height: 180,\r\n    },\r\n    input: {\r\n      display: \"none\",\r\n    },\r\n    box: {\r\n      justifyContent: \"center\",\r\n    },\r\n    div: {\r\n      display: \"flex\",\r\n    },\r\n    gridList: {\r\n      width: 700,\r\n    },\r\n  })\r\n);\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport interface EditProfileModalProps {\r\n  open: boolean;\r\n  userId: string;\r\n  profImage: IProfPic;\r\n  cover?: IImageData;\r\n  setopenEditProfileModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({\r\n  open,\r\n  userId,\r\n  profImage,\r\n  cover,\r\n  setopenEditProfileModal,\r\n}: EditProfileModalProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [profilePicture, setProfilePicture] = useState<IProfPic>();\r\n  const [imageData, setImageData] = useState<object[]>();\r\n\r\n  const handleClose = () => {\r\n    setopenEditProfileModal(false);\r\n  };\r\n\r\n  const handleImageUpload = async (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    category: string\r\n  ) => {\r\n    const imageInfo: object[] = [];\r\n    if (e.target.files !== null) {\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        const file = e.target.files[i];\r\n        const data: IImageData = await uploadImage(file);\r\n        if (category === \"avatar\") {\r\n          setProfilePicture(data);\r\n          dispatch(updateUserProfPic(userId, data));\r\n          imageInfo.push(data);\r\n        } else {\r\n          dispatch(updateUserCoverPhoto(userId, data));\r\n        }\r\n      }\r\n    }\r\n    setImageData(imageInfo);\r\n  };\r\n\r\n  const uploadImage = (\r\n    imageFile: Blob | Uint8Array | ArrayBuffer\r\n  ): Promise<IImageData> => {\r\n    return new Promise((resolve, reject) => {\r\n      let currentImageName = `firebase-image-${Date.now()}-${userId}`;\r\n      let uploadImage = storage\r\n        .ref(`images/${currentImageName}`)\r\n        .put(imageFile);\r\n\r\n      uploadImage.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          var progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log(\"Upload is \" + progress + \"% done\");\r\n        },\r\n        (error) => reject(error),\r\n        () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(currentImageName)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              resolve({\r\n                name: currentImageName,\r\n                url,\r\n              });\r\n            });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        // onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Edit Profile\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item container justify=\"flex-start\" xs={6}>\r\n                  <Typography variant=\"h5\">Profile Picture</Typography>\r\n                </Grid>\r\n                <Grid item container justify=\"flex-end\" xs={6}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"avatar-upload\"\r\n                    type=\"file\"\r\n                    onChange={(e) => handleImageUpload(e, \"avatar\")}\r\n                  />\r\n                  <label htmlFor=\"avatar-upload\">\r\n                    <Button\r\n                      // variant=\"contained\"\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      size=\"small\"\r\n                      startIcon={<PhotoIcon />}\r\n                    >\r\n                      Photo\r\n                    </Button>\r\n                  </label>\r\n                </Grid>\r\n              </Grid>\r\n              <Box\r\n                bgcolor=\"secondary.main\"\r\n                p={5}\r\n                display=\"flex\"\r\n                className={classes.box}\r\n              >\r\n                <Avatar\r\n                  className={classes.avatar}\r\n                  alt={profImage.name}\r\n                  src={profImage.url}\r\n                />\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item container justify=\"flex-start\" xs={6}>\r\n                  <Typography variant=\"h5\">Cover Photo</Typography>\r\n                </Grid>\r\n                <Grid item container justify=\"flex-end\" xs={6}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"cover-upload\"\r\n                    type=\"file\"\r\n                    onChange={(e) => handleImageUpload(e, \"cover\")}\r\n                  />\r\n                  <label htmlFor=\"cover-upload\">\r\n                    <Button\r\n                      // variant=\"contained\"\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      size=\"small\"\r\n                      startIcon={<PhotoIcon />}\r\n                    >\r\n                      Photo\r\n                    </Button>\r\n                  </label>\r\n                </Grid>\r\n              </Grid>\r\n              <Box\r\n                bgcolor=\"secondary.main\"\r\n                p={5}\r\n                display=\"flex\"\r\n                className={classes.box}\r\n              >\r\n                {cover ? (\r\n                  // <div className={classes.div}>\r\n                  <GridList\r\n                    cellHeight={300}\r\n                    className={classes.gridList}\r\n                    cols={1}\r\n                  >\r\n                    <GridListTile>\r\n                      <img alt={cover.name} src={cover.url} />\r\n                    </GridListTile>\r\n                  </GridList>\r\n                ) : (\r\n                  // </div>\r\n                  <AccountBoxIcon className={classes.avatar} />\r\n                )}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        {/* <DialogActions>\r\n          <Button autoFocus color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions> */}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfileModal;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\users.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\root.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\postField.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\profileAvatar.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\deleteModal.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\search.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\services\\searchFriendService.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\friendList.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\store\\friends.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\notifications.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\styledBadge.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\friendsListDrawer.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\chatBox.tsx",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\register.tsx",["208"],"import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport DatePicker from \"./common/datePicker\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { registerUser } from \"../store/users\";\r\nimport { IRegisterUser } from \"../interfaces/users\";\r\nimport registrationValiditionSchema from \"../validation/registration\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport interface RegisterProps {\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst defaultValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  birthDate: new Date(),\r\n  gender: \"\",\r\n};\r\n\r\nconst Register: React.FC<RegisterProps> = ({\r\n  open,\r\n  setOpen,\r\n}: RegisterProps) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    control,\r\n    errors,\r\n    handleSubmit,\r\n    reset,\r\n    clearErrors,\r\n    formState: { isSubmitSuccessful },\r\n  } = useForm<IRegisterUser>({\r\n    defaultValues,\r\n    resolver: yupResolver(registrationValiditionSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isSubmitSuccessful) reset(defaultValues);\r\n  }, [isSubmitSuccessful, open, reset]);\r\n\r\n  const onSubmit: SubmitHandler<IRegisterUser> = (data) => {\r\n    dispatch(registerUser(data));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    reset(defaultValues);\r\n    clearErrors();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        open={open}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          Sign Up\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            className={classes.closeButton}\r\n            onClick={handleClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <Divider variant=\"middle\" />\r\n        <DialogContent>\r\n          <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"firstName\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.firstName ? true : false}\r\n                      required\r\n                      label=\"First name\"\r\n                      id=\"register-firstName\"\r\n                      placeholder=\"First name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.firstName ? errors.firstName.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"lastName\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.lastName ? true : false}\r\n                      required\r\n                      label=\"Last name\"\r\n                      id=\"register-lastName\"\r\n                      placeholder=\"Last name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.lastName ? errors.lastName.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"email\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.email ? true : false}\r\n                      required\r\n                      label=\"Email\"\r\n                      id=\"register-email\"\r\n                      placeholder=\"Email\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={errors.email ? errors.email.message : \"\"}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"password\"\r\n                  as={\r\n                    <TextField\r\n                      error={errors.password ? true : false}\r\n                      required\r\n                      id=\"register-password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      helperText={\r\n                        errors.password ? errors.password.message : \"\"\r\n                      }\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"birthDate\"\r\n                  render={(props) => (\r\n                    <DatePicker value={props.value} onChange={props.onChange} />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"gender\"\r\n                  as={\r\n                    <TextField\r\n                      required\r\n                      id=\"register-gender\"\r\n                      select\r\n                      label=\"Select Gender\"\r\n                      defaultValue=\"\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select Gender\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Male\">Male</MenuItem>\r\n                      <MenuItem value=\"Female\">Female</MenuItem>\r\n                      <MenuItem value=\"Unspecified\">\r\n                        Prefer not to specify\r\n                      </MenuItem>\r\n                    </TextField>\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Sign Up\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\components\\common\\datePicker.tsx",["209"],"import \"date-fns\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\nexport interface DatePickerProps {\r\n  value: Date;\r\n  onChange: () => void;\r\n}\r\n\r\nconst DatePicker: React.FC<DatePickerProps> = ({\r\n  value,\r\n  onChange,\r\n}: DatePickerProps) => {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        {/* <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"MM/dd/yyyy\"\r\n          margin=\"normal\"\r\n          id=\"date-picker-inline\"\r\n          label=\"Date picker inline\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        /> */}\r\n        <KeyboardDatePicker\r\n          required\r\n          margin=\"normal\"\r\n          id=\"birthday\"\r\n          label=\"Birthday\"\r\n          format=\"MM/dd/yyyy\"\r\n          value={value}\r\n          onChange={onChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        />\r\n        {/* <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Time picker\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change time\",\r\n          }}\r\n        /> */}\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\registration.ts",[],"C:\\Users\\Neil John\\Documents\\social-media-app-client\\src\\validation\\login.ts",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":11,"column":8,"nodeType":"216","messageId":"217","endLine":11,"endColumn":24},{"ruleId":"214","severity":1,"message":"218","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"219","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":16},{"ruleId":"214","severity":1,"message":"220","line":16,"column":8,"nodeType":"216","messageId":"217","endLine":16,"endColumn":25},{"ruleId":"214","severity":1,"message":"221","line":115,"column":7,"nodeType":"216","messageId":"217","endLine":115,"endColumn":20},{"ruleId":"214","severity":1,"message":"222","line":139,"column":10,"nodeType":"216","messageId":"217","endLine":139,"endColumn":24},{"ruleId":"214","severity":1,"message":"223","line":140,"column":10,"nodeType":"216","messageId":"217","endLine":140,"endColumn":19},{"ruleId":"214","severity":1,"message":"224","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":25},{"ruleId":"214","severity":1,"message":"225","line":7,"column":3,"nodeType":"216","messageId":"217","endLine":7,"endColumn":21},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"@typescript-eslint/no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'DialogActions' is assigned a value but never used.","'profilePicture' is assigned a value but never used.","'imageData' is assigned a value but never used.","'useState' is defined but never used.","'KeyboardTimePicker' is defined but never used.","no-global-assign","no-unsafe-negation"]